---
CS399/400: OverTheWire Bandit Notes
Author: Ashok Khare
---
LEVEL 0
-> Found password using 'cat readme' after logging in.
-> Password for level 1: NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL
---
LEVEL 1
-> cat, vi will not work here since '-' is apparently a special character that correlates to stdin/stdout.
-> According to an article linked on OverTheWire, you must specify the full filename of a file starting with a dash (i.e. ./-)
--> Article in question: https://stackoverflow.com/questions/42187323/how-to-open-a-dashed-filename-using-terminal
-> Found password using 'cat ./-' after logging in.
-> Password for level 2: rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi
---
LEVEL 2
-> 'spaces in this filename', despite being the name of a single file, is on its own treated as four files ('spaces', 'in', 'this', 'filename')
-> Must use single quotes ('') to specify a single literal (i.e., write "cat 'spaces in this filename'").
-> Found password using "cat 'spaces in this filename'" after logging in.
-> Password for level 3: aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG
---
LEVEL 3
-> The -a flag can be used with ls to see hidden files (files starting with '.')
-> Found password as follows:
--> Navigated to inhere directory using 'cd inhere' after logging in
--> Searched for the hidden file using 'ls -a'
--> Found password using 'cat .hidden'.
-> Password for level 4: 2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe
---
LEVEL 4
-> The 'file' command tests each file given in its arguments and prints out the type of information or data contained in the file (i.e. text, executable, etc.)
-> Found password as follows:
--> Navigated to inhere directory using 'cd inhere' after logging in
--> Printed out the types of the files inside the directory with 'file ./-file00 ./-file01 ./-file02 ./-file03 ./-file04 ./-file05 ./-file06 ./-file07 ./-file08 ./-file09'
--> -file07 was the only file of type 'text' (printing characters/ASCII-readable text).
--> Found password using 'cat ./-file07'.
-> Password for level 5: lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR
---
LEVEL 5
-> The 'find' command can be used to search through files in a directory that fulfill certain criteria, and print out the matches.
-> Example criteria: -readable (human-readable), -executable (executable), -size 1033c (files with a size of 1033 bytes)
-> Found password as follows:
--> Navigated to inhere directory using 'cd inhere' after logging in
--> Filtered the files inside the directory with 'find -readable -size 1033c'
--> .file2 in the directory maybehere07 was the only match
--> Found password using 'cat ./maybehere07/.file2'.
-> Password for level 6: P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU
---
LEVEL 6
-> The find command can be used again here, this time with some special syntax '2>/dev/null'.
-> 2>/dev/null apparently pipes everything in "file 2" (the file where stderr prints to) into the file /dev/null (still a little unclear on what "file 2" means).
-> Found password as follows:
--> After logging in, ran the command 'find / -size 33c -group bandit6 -user bandit7 2>/dev/null'.
--> The only file returned from this was /var/lib/dpkg/info/bandit7.password.
--> Found password using 'cat /var/lib/dpkg/info/bandit7.password'.
-> Password for level 7: z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S
---
LEVEL 7
-> The 'grep' command can be used to search files for particular contents.
-> Found password using 'grep "millionth" data.txt'.
-> Password for level 8: TESKZC0XvTetK0S9xNwm25STk5iWrBvP
---
LEVEL 8
-> The 'sort' command sorts the contents of a given file and prints the result.
-> The 'uniq' command takes a given input and, with no flags, prints out every distinct line in the input once.
--> With the -u flag, uniq prints only the lines that occur once in the input.
-> Piping (|) allows you to direct the results of one command to flow immediately into another.
-> Redirecting (>) allows you to save the results of a command to a file instead of printing to the screen.
-> Found password using 'sort data.txt | uniq -u'.
-> Password for level 9: EN632PlfYiZbn3PhVK3XOGSlNInNE00t
---
LEVEL 9
-> The 'strings' command prints all sequences of at least 4 printable characters in a given file.
--> Options include sets of permissible characters, minimum sequence length, among others.
-> Found password using 'strings data.txt | grep "=="'.
-> Password for level 10: G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s
---
LEVEL 10
-> The command 'base64' encodes the contents of a given file in Base64 (by default), or decodes from Base64 if the flag -d is used.
-> Found password using 'base64 -d data.txt'.
-> Password for level 11: 6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM
---
LEVEL 11
-> The 'tr' command translates a given set of characters into a second given set of characters, matching characters by their placement in their set.
-> Found password using 'cat data.txt | tr nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM abcdefghijklmnopqrstuvwxyzABCD
EFGHIJKLMNOPQRSTUVWXYZ'.
-> Password for level 12: JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv
---
LEVEL 12
-> Used the 'file' command to determine the type of the file (so as to know what command to use at each stage of decompression).
-> Decoded hexdump and sent result to a new file using 'xxd -r [filename] > [new-filename]'.
-> Used a combination of 'tar -xf [filename]', 'gzip -d [filename.gz]', and 'bzip2 -d [filename.bz2]' to decode the file.
-> Used 'mv' to rename the file extension so to enable the other commands (e.g. 'mv data1.bin data1.gz).
-> Once the file was fully uncompressed, found the password using 'cat [filename]'.
-> Password for level 13: wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw
---
LEVEL 13
-> Once logged in, ran another ssh using PKA by using the -i flag to specify the file with the private key
-> Specifically, used the command 'ssh -p 2220 -i sshkey.private bandit14@localhost'.
-> Once logged in as bandit14, navigated to the directory containing the password file with 'cd /etc/bandit_pass'.
-> Found the password using 'cat bandit14'.
-> Password for level 14: fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq
---
LEVEL 14
-> Used the 'nc' command to open a general-purpose TCP connection by typing 'nc localhost 30000'
-> Entered the password for level 14 (as shown in the entry for level 13) to find the next password.
-> Password for level 15: jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt
---
LEVEL 15
-> Used the 'openssl' command to establish a TLS connection by typing 'openssl s_client -connect localhost:30001'.
-> Once the connection was established, entered the password for level 15 (as shown in the entry for level 13) to find the next password.
-> Password for level 16: JQttfApK4SeyHwDlI9SXGR50qclOAil1
---
LEVEL 16
-> Scanned for open ports using 'nmap -p31000-32000 localhost'.
-> Checked which ports communicated using SSL by typing 'openssl s_client -connect localhost:[port-to-check]'.
-> Got an RSA private key when the password for level 16 (shown in the entry for level 15) was provided to port 31790.
-> Copied the RSA key to a temporary file and changed the file's permissions to read only for users with 'chmod go-rw secret.key'.
-> Logged into bandit17's account using 'ssh -p 2220 -i secret.key bandit17@localhost'.
---
LEVEL 17
-> The 'diff' command by default prints out the contents of each line that differs between two files.
-> Found the password using 'diff passwords.old passwords.new'.
-> Password for level 18: hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg
---
LEVEL 18
-> You can write a terminal command (i.e. ls, cat [filename]) at the end of an ssh command to immediately run the terminal command on the remote host instead of having to open a shell to execute it in.
-> Found password using 'ssh -p 2220 bandit18@bandit.labs.overthewire.org cat readme' and entering the password for level 18 (as shown in the entry for level 17).
-> Password for level 19: awhqfNnAbc1naukrpqDYcF95h7HoMTrC
---
LEVEL 19
-> The file bandit20-do has a setuid bit (s) set in the file permissions, which allows another user to run it with bandit20's permissions.
-> Running bandit20-do followed by another command executes that command with bandit20's permissions.
-> Found the password using './bandit20-do cat /etc/bandit_pass/bandit20'.
-> Password for level 20: VxCazJaVykI6W36BkBU0mJTCM8rR95XT
---
LEVEL 20
-> Used the 'screen' command to open a new terminal window, and in that window, typed Ctrl-a followed by c to create a second window.
-> Typed Ctrl-a followed by either n or p to move between the windows.
-> In the first window, opened a port for listening by typing 'nc -lp 12345'.
-> In the second window, opened a connection to the port by typing './suconnect 12345'.
-> Back in the first window, typed in and entered the password for level 20 (as shown in the entry for level 19). The password for level 21 was then printed to the screen.
-> Password for level 21: NvEJF7oVjkddltPSrdKEFOllh9V1IBcq
---
LEVEL 21
-> Opened the file 'cronjob_bandit22' in the directory '/etc/cron.d'.
-> Ran 'cat /usr/bin/cronjob_bandit22.sh' to read its contents.
-> Ran 'cat /usr/bin/cronjob_bandit22.sh' to read its contents.
-> Ran 'cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv' to read its contents, and found the password there.
-> Password for level 22: WdDozAdTM2z9DiFEQ2mGlwngMfj4EZff
---
LEVEL 22
-> Traversed to the directory '/etc/cron.d'.
-> Ran 'cat /usr/bin/cronjob_bandit23.sh' to read its contents.
-> Ran the command 'md5sum', which checks and prints MD5 checksums, then entered 'I am user bandit23'.
-> Ran 'cat /tmp/8ca319486bfbbc3663ea0fbe81326349' to read its contents, and found the password there.
-> Password for level 23: QYw0Y2aiA672PsMmh9puTQuhoz8SyR2G
